#+TITLE: Emacs literate configuration
#+AUTHOR: Joan Domingo Pasarin
#+EMAIL: jdomingopasarin@icloud.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh install and have my whole environment automatically installed.

#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
(use-package auto-compile
    :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src
* Use UTF-8 encoding

Set default encoding to utf-8

#+begin_src emacs-lisp :tangle yes
(defconst IS-WINDOWS (memq system-type '(cywig windows-nt ms-dos)))

(when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
;; The clipboard's on Windows could be in an encoding that's wider (or thinner)
;; than utf-8, so let Emacs/the OS decide what encoding to use there.
(unless IS-WINDOWS
    (setq selection-coding-system 'utf-8)) ; with sugar on top
#+end_src
* Set sensible defaults

Set a bunch of sensible default options.

#+begin_src emacs-lisp
;; Disable startup messages.
(setq inhibit-startup-message t
    inhibit-startup-echo-area-message user-login-name
    inhibit-default-init t
    ;; Avoid pulling in many packages by starting the scratch buffer in
    ;; `fundamental-mode', rather than, say, `org-mode' or `text-mode'.
    initial-major-mode 'fundamental-mode
    initial-scratch-message nil)

;; Get rid of "For information about GNU Emacs..." message at startup, unless
;; we're in a daemon session, where it'll say "Starting Emacs daemon." instead,
;; which isn't so bad.

(unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))

;; Default directory.
(setq default-directory "~/")

;; Delete trailing whitespace after saving buffer.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Treat camelcase words as separate words.
(add-hook 'prog-mode-hook 'subword-mode)

;; Always follow symlinks.
(setq vc-follow-symlinks t)

;; Don't assume sentences should have two spaces after periods.
(setq sentence-end-double-space nil)

;; When saving a file in a directory that doesn't exist, offer to (recursively) create the file's parent directories.
(add-hook 'before-save-hook
    (lambda ()
        (when buffer-file-name
            (let ((dir (file-name-directory buffer-file-name)))
                (when (and (not (file-exists-p dir))
                    (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t))))))

;; If some text is selected, and you type some text, delete the selected text and start inserting your typed text.
(delete-selection-mode t)

;; End files with a new lins.
(setq require-final-newline t)

;; Ask to close emacs.
(setq confirm-kill-emacs 'y-or-n-p)

;; Human-readable units in dired.
(setq-default dired-listing-switches "-alh")

;; Ask `y/n?'.
(fset 'yes-or-no-p 'y-or-n-p)

;; Enable syntax higlighting.
(global-font-lock-mode t)

;; Refresh changed buffers.
(global-auto-revert-mode t)

;; Indicate matching parentheses.
(show-paren-mode t)
(setq show-paren-delay 0.0)

;; Disable bell.
(setq ring-bell-function 'ignore)

;; Open files in the same frame in macos.
(setq ns-pop-up-frames nil)

;; Make <home> and <end> key move the point.
(global-set-key (kbd "<home>") 'move-beginning-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)

;; Set C-+ and C-- to resize text
(define-key global-map (kbd "C-)") '(text-scale-set 0))
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src
* Set personal information

#+begin_src emacs-lisp
    (setq user-full-name "Joan Domingo Pasarin"
        user-mail-address "jdomingopasarin@icloud.com"
        calendar-latitude 41.38
        calendar-longitude 2.15
        calendar-location-name "Barcelona")
#+end_src
* =evil-mode=

I'd prefer not to expand abbrevs when I hit escape. That's always jarring and
usually not what I want. In particular, it makes working with Coq really
frustrating.

#+begin_src emacs-lisp
    (setq evil-want-abbrev-expand-on-insert-exit nil)
#+end_src

Use =evil=.

#+begin_src emacs-lisp
    (use-package evil
        :init
        (setq evil-want-keybinding nil)

        :config
        (evil-mode 1))
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
    (use-package evil-collection
        :after evil)
#+end_src

Enable =surround= everywhere.

#+begin_src emacs-lisp
    (use-package evil-surround
        :config
        (global-evil-surround-mode 1))
#+end_src

Use =evil= with Org agendas.

#+begin_src emacs-lisp
    (use-package evil-org
        :after org
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
                (lambda () (evil-org-set-key-theme)))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))
#+end_src
