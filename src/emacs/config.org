#+TITLE: Emacs literate configuration
#+AUTHOR: Joan Domingo Pasarin
#+EMAIL: jdomingopasarin@icloud.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh install and have my whole environment automatically installed.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t
    use-package-verbose t)
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC
* Set sensible defaults

Disable startup messages.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
    inhibit-startup-echo-area-message user-login-name
    inhibit-default-init t
    ;; Avoid pulling in many packages by starting the scratch buffer in
    ;; `fundamental-mode', rather than, say, `org-mode' or `text-mode'.
    initial-major-mode 'fundamental-mode
    initial-scratch-message nil)

  ;; Get rid of "For information about GNU Emacs..." message at startup, unless
  ;; we're in a daemon session, where it'll say "Starting Emacs daemon." instead,
  ;; which isn't so bad.

  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))
#+END_SRC

Move Custom configuration to custom.el.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (if (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

Set some nice backup files settings.

#+BEGIN_SRC emacs-lisp
  (setq
    backup-by-copying t
    backup-directory-alist '(("." . "~/.emacs.d/backups"))
    delete-old-versions t
    kept-new-versions 4
    version-control t)
#+END_SRC

Set default directory.

#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC

Delete trailing whitespace after saving buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Treat camelcase as separate words.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

Follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Don't assume sentences should have two spaces after periods.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

When saving a file in a directory that doesn't exist, offer to (recursively) create the file's parent directories.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook
    (lambda ()
        (when buffer-file-name
            (let ((dir (file-name-directory buffer-file-name)))
                (when (and (not (file-exists-p dir))
                    (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t))))))
#+END_SRC

If some text is selected, and you type some text, delete the selected text and start inserting your typed text.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

End files with a new lins.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Ask to close emacs.

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

Human-readable units in dired.

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alhv")
#+END_SRC

Ask `y/n?'.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Enable syntax higlighting.

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

Refresh changed buffers.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

Indicate matching parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
#+END_SRC

Disable bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Open files in the same frame in macos.

#+BEGIN_SRC emacs-lisp
  (setq ns-pop-up-frames nil)
#+END_SRC

Make <home> and <end> key move the point.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<home>") 'move-beginning-of-line)
  (global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC
* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Joan Domingo Pasarin"
    user-mail-address "jdomingopasarin@icloud.com"
    calendar-latitude 41.38
    calendar-longitude 2.15
    calendar-location-name "Barcelona")
#+END_SRC
* =evil-mode=

I'd prefer not to expand abbrevs when I hit escape. That's always jarring and
usually not what I want. In particular, it makes working with Coq really
frustrating.

#+BEGIN_SRC emacs-lisp
  (setq evil-want-abbrev-expand-on-insert-exit nil)
#+END_SRC

Use =evil=.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)

    :config
    (evil-mode 1))
#+END_SRC

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil)
#+END_SRC

Enable =surround= everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC

Use =evil= with Org agendas.

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
        (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp
  (defun jdominpa/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
    (if filename
        (progn
            (when (buffer-modified-p)
            (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun jdominpa/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
    name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

  (defun jdominpa/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun jdominpa/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
        (when file-name
            (find-alternate-file (concat "/sudo::" file-name)))))

  (defun jdominpa/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (defun jdominpa/notify-send (title message)
    "Display a desktop notification by shelling out to `notify-send'."
    (call-process-shell-command
        (format "dunstify -t 2000 \"%s\" \"%s\"" title message)))
#+END_SRC
* Style and visual settings

** Remove scroll, menu and tool bar

I don't usually use the menu or scroll bar, and they take up useful
space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

There's a tiny scroll bar that appears in the minibuffer window. This
disables that:

#+BEGIN_SRC emacs-lisp
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

The default frame title isn't useful. This binds it to the name of the
current project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC
** Change window title

Change window title to a more useful name.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '("%b â€“ Emacs")
    icon-title-format frame-title-format)
#+END_SRC

** Fringes

I don't like the little arrows shown when you can scroll down. This
disables them.

#+BEGIN_SRC emacs-lisp
  (setq indicate-buffer-boundaries nil)
  (setq indicate-empty-lines nil)
#+END_SRC

** Use fancy lambdas

Replace strings like \lambda in latex for the actual symbol.

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Load up a theme

I'm currently using the "dracula" theme. I've got a scenic wallpaper,
so just a hint of transparency looks lovely and isn't distracting or
hard to read.

#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :config
    (let ((line (face-attribute 'mode-line :underline)))
        (set-face-attribute 'mode-line          nil :overline   line)
        (set-face-attribute 'mode-line-inactive nil :overline   line)
        (set-face-attribute 'mode-line-inactive nil :underline  line)
        (set-face-attribute 'mode-line          nil :box        nil)
        (set-face-attribute 'mode-line-inactive nil :box        nil)
        (set-face-attribute 'mode-line-inactive nil :background "#f9f2d9")))

  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

  (defun jdominpa/apply-theme ()
    "Apply the `dracula' theme and make frames just slightly transparent."
    (interactive)
    (load-theme 'dracula t)
    (transparency 100))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
    (add-hook 'after-make-frame-functions
        (lambda (frame)
            (with-selected-frame frame (jdominpa/apply-theme))))
  (jdominpa/apply-theme))
#+END_SRC

** Use =doom-modeline= for a beautiful modeline

Nice custom modeline.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
  (setq doom-modeline-major-mode-icon nil)
#+END_SRC

** Use =minions= to hide all minor modes

#I never want to see a minor mode, and manually adding =:diminish= to
#every use-package declaration is a hassle. This uses =minions= to
#hide all the minor modes in the modeline. Nice!
#
#By default there's a =;-)= after the major mode; that's an adorable
#default, but I'd rather skip it.
#
##+BEGIN_SRC emacs-lisp
#    (use-package minions
#        :config
#        (setq minions-mode-line-lighter ""
#                minions-mode-line-delimiters '("" . ""))
#        (minions-mode 1))
##+END_SRC

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer
point. I'm not crazy about that. This changes scrolling behavior to
only scroll as far as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Set default font and configure font resizing

The standard =text-scale-= functions just resize the text in the
current buffer; I'd generally like to resize the text in /every/
buffer, and I usually want to change the size of the modeline, too
(this is especially helpful when presenting). These functions and
bindings let me resize everything all together!

#+BEGIN_SRC emacs-lisp
  (setq jdominpa/default-font "monospace")
  (setq jdominpa/default-font-size 13)
  (setq jdominpa/current-font-size jdominpa/default-font-size)

  (setq jdominpa/font-change-increment 1.1)

  (defun jdominpa/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat jdominpa/default-font "-" (number-to-string jdominpa/current-font-size)))

  (defun jdominpa/set-font-size ()
    "Set the font to `jdominpa/default-font' at `jdominpa/current-font-size'.
    Set that for the current frame, and also make it the default for other, future frames."
    (let ((font-code (jdominpa/font-code)))
        (if (assoc 'font default-frame-alist)
            (setcdr (assoc 'font default-frame-alist) font-code)
        (add-to-list 'default-frame-alist (cons 'font font-code)))
        (set-frame-font font-code)))

  (defun jdominpa/reset-font-size ()
    "Change font size back to `jdominpa/default-font-size'."
    (interactive)
    (setq jdominpa/current-font-size jdominpa/default-font-size)
    (jdominpa/set-font-size))

  (defun jdominpa/increase-font-size ()
    "Increase current font size by a factor of `jdominpa/font-change-increment'."
    (interactive)
    (setq jdominpa/current-font-size
            (ceiling (* jdominpa/current-font-size jdominpa/font-change-increment)))
    (jdominpa/set-font-size))

  (defun jdominpa/decrease-font-size ()
    "Decrease current font size by a factor of `jdominpa/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq jdominpa/current-font-size
        (max 1
              (floor (/ jdominpa/current-font-size jdominpa/font-change-increment))))
    (jdominpa/set-font-size))

  (define-key global-map (kbd "C-)") 'jdominpa/reset-font-size)
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C-=") 'jdominpa/increase-font-size)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
  (define-key global-map (kbd "C-Â¡") 'jdominpa/decrease-font-size)

  (jdominpa/reset-font-size)
#+END_SRC

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the
line containing point. It makes it a bit easier to find point, and
it's useful when pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Disable cursor blink

I don't like the cursor blinking constantly.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines
when programming.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC
** Disable parenthesis matching highlight

#+BEGIN_SRC emacs-lisp
  (setq blink-matching-paren nil)
#+END_SRC
* Core/Global packages

Configuration of every package that's used globally.

** =company=

Use =company-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (define-key company-mode-map (kbd "C-j") 'company-complete)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))

  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Use =M-/= for completion.

#+BEGIN_SRC emacs-lisp
  ;(global-set-key (kbd "M--") 'company-complete-common)
#+END_SRC

** =ivy= and =counsel=

I use =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's
  thoroughly unhelpful), and
- Includes recent files in the switch buffer.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package flx)
    (use-package smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))
#+END_SRC

** =magit=

I use =magit= to handle version control. It's lovely, but I tweak a
few things:

- I bring up the status menu with =C-x g=.
- Use =evil= keybindings with =magit=.
- The default behavior of =magit= is to ask before pushing. I haven't
  had any problems with accidentally pushing, so I'd rather not
  confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line
  that goes beyond 50 characters.
- On the command line I'll generally push a new branch with a plain
  old =git push=, which automatically creates a tracking branch on
  (usually) =origin=. Magit, by default, wants me to manually specify
  an upstream branch. This binds =P P= to =magit-push-implicitly=,
  which is just a wrapper around =git push -v=. Convenient!
- I'd like to start in the insert state when writing a commit message.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    (use-package evil-magit)
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

    (with-eval-after-load 'magit-remote
        (transient-append-suffix 'magit-push ?P
            'magit-push-implicitly--desc
            'magit-push-implicitly ?p t))

    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

I've been playing around with the newly-released =forge= for managing
GitHub PRs and issues. Seems slick so far.

#+BEGIN_SRC emacs-lisp
  (use-package ghub)
  (use-package forge)
#+END_SRC

I'm also partial to =git-timemachine=, which lets you quickly page
through the history of a file.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC

** =projectile=

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)

    (setq projectile-completion-system 'ivy)
    (setq projectile-require-project-root nil))
#+END_SRC

** =flycheck=

#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

** =undo-tree=

I like tree-based undo management. I only rarely need it, but when I do, oh boy.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    :config
      (setq undo-tree-visualizer-diff t))
#+END_SRC

** =helpful=

The =helpful= package provides, among other things, more context in Help
buffers.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :init
    (global-set-key [remap describe-function] #'helpful-callable)
    (global-set-key [remap describe-variable] #'helpful-variable)
    (global-set-key [remap describe-command] #'helpful-command)
    (global-set-key [remap describe-symbol] #'helpful-symbol)
    (global-set-key [remap describe-key] #'helpful-key))

  (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window)
#+END_SRC

** =which-key=

=which-key= displays the possible completions for a long keybinding. That's
really helpful for some modes (like =projectile=, for example).

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
* Mode settings

** Org

*** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Disable the extra stars at the begining of a org bullet.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
#+END_SRC

Indent properly new lines.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
    '("el" . "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

*** Task and org-capture management

Store my org files in =~/Documents/Org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Documents/Org")
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Ensure that a task can't be marked as done if it contains unfinished subtasks or
checklist items. This is handy for organizing "blocking" tasks hierarchically.

#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+END_SRC

Default to two weeks of agenda (instead of the default single week). Begin those
weeks /today/, not on the last Monday.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 14)
#+END_SRC

** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

Enable =haskell-doc-mode=, which displays the type signature of a function, and
use smart indentation.

#+begin_src emacs-lisp
  (add-hook 'haskell-mode-hook
      (lambda ()
          (haskell-doc-mode)
          (turn-on-haskell-indent)))
#+end_src

** Lisps

I like to use =paredit= in Lisp modes to balance parentheses (and more!).

#+begin_src emacs-lisp
  (use-package paredit)
#+end_src

=rainbow-delimiters= is convenient for coloring matching parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
#+end_src

All the lisps have some shared features, so we want to do the same things for
all of them. That includes using =paredit=, =rainbow-delimiters=, and
highlighting the whole expression when point is on a parenthesis.

#+begin_src emacs-lisp
    (setq lispy-mode-hooks
        '(clojure-mode-hook
            emacs-lisp-mode-hook
            lisp-mode-hook
            scheme-mode-hook))

    (dolist (hook lispy-mode-hooks)
        (add-hook hook (lambda ()
                            (paredit-mode)
                            (rainbow-delimiters-mode))))
#+end_src

If I'm writing in Emacs lisp I'd like to use =eldoc-mode= to display
documentation.

#+begin_src emacs-lisp
  (use-package eldoc
      :config
      (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+end_src

I also like using =flycheck-package= to ensure that my Elisp packages are
correctly formatted.

#+begin_src emacs-lisp
  (use-package flycheck-package)
  (eval-after-load 'flycheck
    '(flycheck-package-setup))
#+end_src

** =sh=

Indent with 2 spaces.

#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook
      (lambda ()
          (setq sh-basic-offset 2
              sh-indentation 2)))
#+end_src
* Configuration settings

** Text settings

*** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'gfm-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
#+END_SRC

*** Always indent with spaces

Never use tabs. Tabs are the devilâ€™s whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Set tab to 4 spaces

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC
** =dired= settings

Set up DWIM ("do what I mean") for =dired=. When I've got two =dired= windows
side-by-side, and I move or copy files in one window, this sets the default
location to the other window.

#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

Kill buffers of files/directories that are deleted in =dired=.

#+BEGIN_SRC emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+END_SRC

Always copy directories recursively instead of asking every time.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively /deleting/ a directory, though.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC

Files are normally moved and copied synchronously. This is fine for small or
local files, but copying a large file or moving a file across a mounted network
drive blocks Emacs until the process is completed. Unacceptable!

This uses =emacs-async= to make =dired= perform actions asynchronously.

#+BEGIN_SRC emacs-lisp
  (use-package async
      :config
      (dired-async-mode 1))
#+END_SRC

Use "j" and "k" to move around in =dired=.

#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
  (evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)
#+END_SRC

** Minibuffers

Enable nested minibuffers

#+BEGIN_SRC emacs-lisp
  (setq enable-recursive-minibuffers t)
#+END_SRC
** Look for executables in =/usr/local/bin=

#+BEGIN_SRC emacs-lisp
  (jdominpa/append-to-path "/usr/local/bin")
#+END_SRC

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+end_src

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/jdominpa/engine-mode][engine-mode]] and define a few useful engines.

#+BEGIN_SRC emacs-lisp
  (use-package engine-mode)
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y")

  (engine-mode t)
#+END_SRC
* Keybindings

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'jdominpa/kill-current-buffer)
#+END_SRC
** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun jdominpa/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c c") 'jdominpa/visit-emacs-config)
#+END_SRC

** Switch to other window

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
