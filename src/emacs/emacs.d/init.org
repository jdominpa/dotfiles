#+TITLE: Emacs Literate Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init-test.el

This is my personal configuration for Emacs. It borrows a lot of
things from [[https://github.com/purcell/emacs.d][Purcell's own Emacs config]] and the youtube series [[https://www.youtube.com/c/SystemCrafters][Emacs
From Scratch]] made by SystemCrafters.

* Startup Performance

Improve startup by reducing the frequency of grabage collection and
mesure Emacs startup time with a hook.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Keep .emacs.d organized

Store backup files in a =backup= folder inside =.emacs.d= and create a
=custom.el= file to store customizations.

#+begin_src emacs-lisp

  (setq-default backup-by-copying t
                version-control t
                delete-old-versions t
                kept-old-versions 4
                kept-new-versions 4
                backup-directory-alist (list (cons "." (expand-file-name "backup" user-emacs-directory))))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

#+end_src

* Pacakge Management

** Package repositories and =use-package=

Set up ELPA, MELPA and Org package repositories and install
=use-package= if it's not installed. All my Emacs configuration is
managed by [[https://github.com/jwiegley/use-package][=use-package=]].

#+begin_src emacs-lisp

  (require 'package)

  ;;; Install into separate package dirs for each Emacs version, to prevent bytecode incompatibility
  (setq package-user-dir
        (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                          user-emacs-directory))

  ;;; Standard package repositories
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  ;;; Fire up package.el
  (setq package-enable-at-startup nil)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)

  ;; Install all packages
  (require 'use-package-ensure)
  (setq use-package-always-ensure t
        use-package-verbose t)

#+end_src

** GNU Elpa keyring

Small package to keep Emacs GPG keyring up to date.

#+begin_src emacs-lisp

  (use-package gnu-elpa-keyring-update
    :init (let ((package-check-signature nil))))

#+end_src

* Update Load Path

Add the folder =.emacs.d/lisp= to the load path so that I can have
custom elisp files.

#+begin_src emacs-lisp

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

#+end_src

* Server Mode

Start Emacs server from this instance so that =emacsclient= calls are
routed here.

#+begin_src emacs-lisp

  (add-hook 'after-init-hook
            (lambda ()
              (require 'server)
              (unless (server-running-p)
                (server-start))))

#+end_src

* Keyboard Bindings

Section dedicated to every custom keyboard binding.

** Rebind C-u

Since I use =evil-mode= which uses =C-u= for buffer scrolling, I
rebind the =universal-argument= command to =M-u=.

#+begin_src emacs-lisp

  (bind-key "M-u" 'universal-argument)

#+end_src

** Evil Mode

Set up for every evil-related setting.

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-respect-visual-line-mode t)
    :hook (after-init . evil-mode))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

  (use-package evil-surround
    :after evil
    :hook (evil-mode . global-evil-surround-mode))

  (use-package evil-magit
    :after evil)

  (use-package evil-org
    :after evil
    :hook ((org-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

** Keybinding cheatsheet (which-key)

=which-key= is a useful package to overview possible key combinations.

#+begin_src emacs-lisp

  (use-package which-key
    :diminish
    :hook (after-init . which-key-mode)
    :config
    (setq-default which-key-idle-delay 1.5))

#+end_src

** macOS specific keybinds

Make =M-h= and =M-H= hide Emacs frame's like with every macOS application.

#+begin_src emacs-lisp

  (bind-keys ("M-h" . ns-do-hide-emacs)
             ("M-H" . ns-do-hide-others))

#+end_src

* General Configuration

General settings like UI changes, themes, fonts, etc.

** User Interface

Improve Emacs' UI by removing some visual noise to make it more minimal.

#+begin_src emacs-lisp

  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq initial-scratch-message nil)
  (setq inhibit-startup-screen t)

  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
  (menu-bar-mode -1)

  (when (fboundp 'set-fringe-mode)
    (set-fringe-mode 10))

#+end_src

Change bell to visual bell to stop it from beeping constantly. I use
[[https://github.com/purcell/mode-line-bell][Purcell's package]] to do it (it removes the giant visual bellwarning
sign in macOS).

#+begin_src emacs-lisp

  (use-package mode-line-bell
    :hook (after-init . mode-line-bell-mode))

#+end_src

Improve scrolling.

#+begin_src emacs-lisp

  (setq-default scroll-preserve-screen-position 'always
                scroll-conservatively 100)

  (when *is-a-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none)
    ;; Make mouse wheel / trackpad scrolling less jerky
    (setq mouse-wheel-scroll-amount '(1
                                      ((shift) . 5)
                                      ((control))))
    (dolist (multiple '("" "double-" "triple-"))
      (dolist (direction '("right" "left"))
        (bind-key (read-kbd-macro (concat "<" multiple "wheel-" direction ">")) 'ignore)))

#+end_src

Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp

  (defun jdp/adjust-opacity (frame incr)
    "Adjust the background opacity of FRAME by increment INCR."
    (unless (display-graphic-p frame)
      (error "Cannot adjust opacity of this frame"))
    (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
           ;; The 'alpha frame param became a pair at some point in
           ;; emacs 24.x, e.g. (100 100)
           (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
           (newalpha (+ incr oldalpha)))
      (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
        (modify-frame-parameters frame (list (cons 'alpha newalpha))))))

  (bind-key "[f7]" (lambda () (interactive) (jdp/adjust-opacity nil -2)))
  (bind-key "[f8]" (lambda () (interactive) (jdp/adjust-opacity nil 2)))
  (bind-key "[f5]" (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (use-package dimmer
    :init (setq-default dimmer-fraction 0.20)
    :hook (after-init . dimmer-mode)
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-magit))

#+end_src

Enable line numbers and configure their format.

#+begin_src emacs-lisp

  (when (fboundp 'display-line-numbers-mode)
    (setq-default display-line-numbers-width 3)
    (add-hook 'prog-mode-hook 'display-line-numbers-mode))

#+end_src

Follow symlinks by default.

#+begin_src emacs-lisp

  (setq-default vc-follow-symlinks t)

#+end_src

Set tooltip's delay to 1.5s

#+begin_src emacs-lisp

  (setq-default tooltip-delay 1.5)

#+end_src

** Theme

I use the [[https://github.com/hlissner/emacs-doom-themes][=doom-themes=]] package since it integrates well with a lot of
Emacs packages and with =doom-modeline=.

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  ;; Set theme
  (load-theme 'doom-palenight t)

#+end_src

** Font

I use whatever monospace font is set to in each system.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Monospace" :height 130)

  ;; ;; Set default font size
  ;; (setq jdp/default-font "monospace-13.5")

  ;; (defun jdp/set-font ()
  ;;   "Set the font to `jdp/default-font'. Set that for the current frame, and also make it the default for other, future frames."
  ;;   (if (assoc 'font default-frame-alist)
  ;;       (setcdr (assoc 'font default-frame-alist) jdp/default-font)
  ;;     (add-to-list 'default-frame-alist (cons 'font jdp/default-font))
  ;;     (set-frame-font jdp/default-font)))

  ;; (jdp/set-font)

#+end_src

** Mode Line

*** Enable Mode Diminishing

Install diminish package to hide minor modes from modeline.

#+begin_src emacs-lisp

  (use-package diminish)

#+end_src

*** Doom Modeline

I use [[https://github.com/seagle0128/doom-modeline][=doom-modeline=]] since it integrates with [[https://github.com/hlissner/emacs-doom-themes][=doom-themes=]].

#+begin_src emacs-lisp

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))

  (use-package all-the-icons
    :after doom-modeline)

#+end_src

*** Colum Numbers In Modeline

#+begin_src emacs-lisp

  (setq-default column-number-mode t)

#+end_src

** Auto-Reverting Changed Files

#+begin_src emacs-lisp

  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode)
    :config
    (setq global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))

#+end_src

* Editing Configuration

Configuration related to editing text files in general.

** Highlight Matching Braces

#+begin_src emacs-lisp

  (use-package paren
    :ensure nil
    :hook (after-init . show-paren-mode))

#+end_src

** Tab Widths

Set default indentation to 2 spaces and use spaces instead of tabs for indentation.

#+begin_src emacs-lisp

  (setq-default tab-width 2
                evil-shift-width tab-width
                indent-tabs-mode nil)

#+end_src

** Automatically Clean Whitespace

Show trailing whitespace only in certain modes and clean whitespace
after saving a buffer.

#+begin_src emacs-lisp

  (setq-default show-trailing-whitespace nil)

  (defun jdp/show-trailing-whitespace ()
    "Enable display of trailing whitespace in this buffer."
    (setq-local show-trailing-whitespace t))

  (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
    (add-hook hook 'jdp/show-trailing-whitespace))

  (use-package whitespace-cleanup-mode
    :diminish
    :hook (after-init . global-whitespace-cleanup-mode))

  (bind-key [remap just-one-space] 'cycle-spacing)

#+end_src

** Extra settings

- Disable cursor blinking
- Case-insensitive searching
- Disable auto-saving files
- Mouse yank commands yank at point instead of at click
- Save clipboard in the kill ring before replacing it

#+begin_src emacs-lisp

  (setq-default blink-cursor-mode nil
                case-fold-search t
                auto-save-default nil
                mouse-yank-at-point t
                save-interprogram-paste-before-kill t)

#+end_src

* Buffer Configuration

Configuration specific to buffers.

#+begin_src emacs-lisp

  (setq-default buffers-menu-max-size 30)

#+end_src

* Org Mode

** Automatically tangle emacs' configuration file

#+begin_src emacs-lisp

  (defun jdp/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "init.org" user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jdp/org-babel-tangle-config)))

#+end_src

Revisar la comparacio de strings en la funcio
